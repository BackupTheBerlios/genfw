/***************************************************************************
 * Copyright (c) 2006 Eike Stepper, Fuggerstr. 39, 10777 Berlin, Germany.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Eike Stepper - initial API and implementation
 **************************************************************************/
package com.sympedia.density.gen.arch.provider;


import com.sympedia.density.gen.arch.util.ArchAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import java.util.ArrayList;
import java.util.Collection;


/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArchItemProviderAdapterFactory extends ArchAdapterFactory implements
        ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArchItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.WorkspaceProject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkspaceProjectItemProvider workspaceProjectItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.WorkspaceProject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createWorkspaceProjectAdapter()
  {
    if (workspaceProjectItemProvider == null)
    {
      workspaceProjectItemProvider = new WorkspaceProjectItemProvider(this);
    }

    return workspaceProjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.ProjectBuilder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectBuilderItemProvider projectBuilderItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.ProjectBuilder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createProjectBuilderAdapter()
  {
    if (projectBuilderItemProvider == null)
    {
      projectBuilderItemProvider = new ProjectBuilderItemProvider(this);
    }

    return projectBuilderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.ProjectNature} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectNatureItemProvider projectNatureItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.ProjectNature}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createProjectNatureAdapter()
  {
    if (projectNatureItemProvider == null)
    {
      projectNatureItemProvider = new ProjectNatureItemProvider(this);
    }

    return projectNatureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.PluginProject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PluginProjectItemProvider pluginProjectItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.PluginProject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createPluginProjectAdapter()
  {
    if (pluginProjectItemProvider == null)
    {
      pluginProjectItemProvider = new PluginProjectItemProvider(this);
    }

    return pluginProjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.FeatureProject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureProjectItemProvider featureProjectItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.FeatureProject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createFeatureProjectAdapter()
  {
    if (featureProjectItemProvider == null)
    {
      featureProjectItemProvider = new FeatureProjectItemProvider(this);
    }

    return featureProjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.ArchitectureSpec} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArchitectureSpecItemProvider architectureSpecItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.ArchitectureSpec}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createArchitectureSpecAdapter()
  {
    if (architectureSpecItemProvider == null)
    {
      architectureSpecItemProvider = new ArchitectureSpecItemProvider(this);
    }

    return architectureSpecItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.sympedia.density.gen.arch.ModelProject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelProjectItemProvider modelProjectItemProvider;

  /**
   * This creates an adapter for a {@link com.sympedia.density.gen.arch.ModelProject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createModelProjectAdapter()
  {
    if (modelProjectItemProvider == null)
    {
      modelProjectItemProvider = new ModelProjectItemProvider(this);
    }

    return modelProjectItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (workspaceProjectItemProvider != null) workspaceProjectItemProvider.dispose();
    if (projectBuilderItemProvider != null) projectBuilderItemProvider.dispose();
    if (projectNatureItemProvider != null) projectNatureItemProvider.dispose();
    if (pluginProjectItemProvider != null) pluginProjectItemProvider.dispose();
    if (featureProjectItemProvider != null) featureProjectItemProvider.dispose();
    if (architectureSpecItemProvider != null) architectureSpecItemProvider.dispose();
    if (modelProjectItemProvider != null) modelProjectItemProvider.dispose();
  }

}
